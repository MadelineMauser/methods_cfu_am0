# =================================
# PART 1

# Define a variable that stores a string

#  call upcase on the variable, print it out
#  call downcase on the variable, print it out
#  call reverse on the variable, print it out
#  call length on the variable, print it out

new_string = "Look at this string"

puts new_string.upcase

puts new_string.downcase

puts new_string.reverse

puts new_string.length


# =================================
# PART 2

user_name = "coco_11am"
last_login = "12/09/2021"

# 1: In the Ruby Docs for String methods (https://ruby-doc.org/core-3.1.0/String.html), find 4 methods you have not yet used and call them on one of the variables above. Between reading the documentation and reading the output from calling the methods, make sense of what they do.
  # Write the methods out on the lines below, with an explanation in your own words of how they work.

# The squeeze method outputs a new string by taking runs of the same character and reducing it to one instance of that character in the string the method was called on.
# The return value is "coco_1am" when this method is called on user_name.
user_name.squeeze

# The chop method outputs a new string generated by removing the last character from the end of the string it was called on.
# The return value is "coco_11a" when this method is call on user_name.
user_name.chop

# The center method outputs a new string that places spaces surrounding the original string such that it is evenly centered and the string is the length of the argument passed to the method.
# The return value is "     12/09/2021     " when this method is called on last_login with the argument 20 passed to it.
last_login.center(20)

# The chars method outputs an array containing each character in the string.
# The return value is ["1", "2", "/", "0", "9", "/", "2", "0", "2", "1"] when this method is called on last_login.
last_login.chars

# 2: Do some research (either testing out with your own code or Googling) to build an understanding of what the `!` does, when at the end of a method name. Show your understading by providing an example and writing an explanation.

# The `!` when placed at the end method causes any actions caused by the method to be done to the original string, rather than a new string, so the original string is permanently changed.
